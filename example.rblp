$lprof0833_c = Array.new(30) { 0 }
$lprof0833_c[0] += 1
small_primes = [2,3,5]
$lprof0833_c[1] += 1

$lprof0833_c[2] += 1
# save 3401 small primes
$lprof0833_c[3] += 1
7.upto(31622) do |i|
$lprof0833_c[4] += 1
  next if (i%6!=1) and (i%6!=5)
$lprof0833_c[5] += 1
  c = Math::sqrt(i).ceil
$lprof0833_c[6] += 1
  prime = true
$lprof0833_c[7] += 1
  small_primes.each do |p|
$lprof0833_c[8] += 1
    break if p > c
$lprof0833_c[9] += 1
    if i % p == 0
$lprof0833_c[10] += 1
      prime = false
$lprof0833_c[11] += 1
      break
$lprof0833_c[12] += 1
    end
$lprof0833_c[13] += 1
  end
$lprof0833_c[14] += 1
  small_primes << i if prime
$lprof0833_c[15] += 1
end
$lprof0833_c[16] += 1

$lprof0833_c[17] += 1
lower = 123456
$lprof0833_c[18] += 1
upper = 654321
$lprof0833_c[19] += 1

$lprof0833_c[20] += 1
sieve = Hash.new(true)
$lprof0833_c[21] += 1
small_primes.each do |p|
$lprof0833_c[22] += 1
  break if p*p > upper
$lprof0833_c[23] += 1
  n = (p >= lower) ? 2*p : lower+((p-lower%p)%p)
$lprof0833_c[24] += 1
  n.step(upper, p) {|i| sieve[i] = false }
$lprof0833_c[25] += 1
end
$lprof0833_c[26] += 1

$lprof0833_c[27] += 1
(upper-lower+1).times do |i|
$lprof0833_c[28] += 1
  puts lower+i if sieve[lower+i]
$lprof0833_c[29] += 1
end
$stderr.puts
$stderr.puts(' --------------------------')
$stderr.puts(' LINE-WISE PROFILING REPORT')
$stderr.puts(' --------------------------')
ml = $lprof0833_c.max.to_s.length
$stderr.printf "%#{ml}d | ", $lprof0833_c[0]
$stderr.puts 'small_primes = [2,3,5]'
$stderr.printf "%#{ml}d | ", $lprof0833_c[1]
$stderr.puts ''
$stderr.printf "%#{ml}d | ", $lprof0833_c[2]
$stderr.puts '# save 3401 small primes'
$stderr.printf "%#{ml}d | ", $lprof0833_c[3]
$stderr.puts '7.upto(31622) do |i|'
$stderr.printf "%#{ml}d | ", $lprof0833_c[4]
$stderr.puts '  next if (i%6!=1) and (i%6!=5)'
$stderr.printf "%#{ml}d | ", $lprof0833_c[5]
$stderr.puts '  c = Math::sqrt(i).ceil'
$stderr.printf "%#{ml}d | ", $lprof0833_c[6]
$stderr.puts '  prime = true'
$stderr.printf "%#{ml}d | ", $lprof0833_c[7]
$stderr.puts '  small_primes.each do |p|'
$stderr.printf "%#{ml}d | ", $lprof0833_c[8]
$stderr.puts '    break if p > c'
$stderr.printf "%#{ml}d | ", $lprof0833_c[9]
$stderr.puts '    if i % p == 0'
$stderr.printf "%#{ml}d | ", $lprof0833_c[10]
$stderr.puts '      prime = false'
$stderr.printf "%#{ml}d | ", $lprof0833_c[11]
$stderr.puts '      break'
$stderr.printf "%#{ml}d | ", $lprof0833_c[12]
$stderr.puts '    end'
$stderr.printf "%#{ml}d | ", $lprof0833_c[13]
$stderr.puts '  end'
$stderr.printf "%#{ml}d | ", $lprof0833_c[14]
$stderr.puts '  small_primes << i if prime'
$stderr.printf "%#{ml}d | ", $lprof0833_c[15]
$stderr.puts 'end'
$stderr.printf "%#{ml}d | ", $lprof0833_c[16]
$stderr.puts ''
$stderr.printf "%#{ml}d | ", $lprof0833_c[17]
$stderr.puts 'lower = 123456'
$stderr.printf "%#{ml}d | ", $lprof0833_c[18]
$stderr.puts 'upper = 654321'
$stderr.printf "%#{ml}d | ", $lprof0833_c[19]
$stderr.puts ''
$stderr.printf "%#{ml}d | ", $lprof0833_c[20]
$stderr.puts 'sieve = Hash.new(true)'
$stderr.printf "%#{ml}d | ", $lprof0833_c[21]
$stderr.puts 'small_primes.each do |p|'
$stderr.printf "%#{ml}d | ", $lprof0833_c[22]
$stderr.puts '  break if p*p > upper'
$stderr.printf "%#{ml}d | ", $lprof0833_c[23]
$stderr.puts '  n = (p >= lower) ? 2*p : lower+((p-lower%p)%p)'
$stderr.printf "%#{ml}d | ", $lprof0833_c[24]
$stderr.puts '  n.step(upper, p) {|i| sieve[i] = false }'
$stderr.printf "%#{ml}d | ", $lprof0833_c[25]
$stderr.puts 'end'
$stderr.printf "%#{ml}d | ", $lprof0833_c[26]
$stderr.puts ''
$stderr.printf "%#{ml}d | ", $lprof0833_c[27]
$stderr.puts '(upper-lower+1).times do |i|'
$stderr.printf "%#{ml}d | ", $lprof0833_c[28]
$stderr.puts '  puts lower+i if sieve[lower+i]'
$stderr.printf "%#{ml}d | ", $lprof0833_c[29]
$stderr.puts 'end'
